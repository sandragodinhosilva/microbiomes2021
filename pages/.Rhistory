str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates CSV (comma separated value) file
write.csv(COG_final, "cog_table.csv", row.names = FALSE, quote=TRUE)
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
# Changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
# Add Description
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates CSV (comma separated value) file
write.csv(COG_final, "cog_table.csv", row.names = FALSE, quote=TRUE)
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data/2_Merge_annotations")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data/2_Merge_annotations")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data/2_Merge_annotations")
# Check if in correct directory:
getwd()
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
str(list.filenamesc)
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
for (i in 0:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
for (i in 2:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data/2_Merge_annotations")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
# Changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
# Add Description
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates CSV (comma separated value) file
write.csv(COG_final, "cog_table.csv", row.names = FALSE, quote=TRUE)
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
View(final_mergec)
View(list.datac)
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
################################################################################
### Script to merge annotation tables from WebMGA
# This script can:
# open cog files
# merge results into a single table
# Steps where code modification is necessary are highlighted with "ATTENTION"
# The remaining comments are just here to help you understand the code
# Author: Sandra Godinho Silva (sandragodinhosilva@tecnico.ulisboa.pt)
# Last version: 15-04-2021
################################################################################
# Install necessary package:
# If the package dplyr is already installed, comment next line (add #):
#install.packages('dplyr', repos = 'https://cloud.r-project.org')
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data/2_Merge_annotations")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
# Changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
# Add Description
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates CSV (comma separated value) file
write.csv(COG_final, "cog_table.csv", row.names = FALSE, quote=TRUE)
xaringan:::inf_mr()
xaringan:::inf_mr()
# install.packages("remotes")
remotes::install_github("jhelvy/xaringanBuilder")
library(xaringanBuilder)
build_pdf("1_Intro.html")
remotes::install_github('rstudio/chromote')
build_pdf("1_Intro.html")
build_pdf("1_Intro.rmd")
remotes::install_github('rstudio/chromote')
xaringan::decktape()
xaringan::decktape("1_Intro.html")
xaringan::decktape("1_Intro.html", outout="intro.pdf")
xaringan::decktape("1_Intro.html", output="intro.pdf")
remotes::install_github("rstudio/chromote")
install.packages(c("progress", "jsonlite", "pdftools", "digest"))
install.packages(c("progress", "jsonlite", "pdftools", "digest"))
build_pdf("1_Intro.rmd")
source("https://git.io/xaringan2pdf")
xarringan_to_pdf(https://sandragodinhosilva.github.io/microbiomes2021/pages/1_Intro.html)
xarringan_to_pdf("https://sandragodinhosilva.github.io/microbiomes2021/pages/1_Intro.html")
#' Print xaringan slides to PDF
#'
#' Prints xaringan slides to a PDF file, even complicated slides
#' with panelsets or other html widgets or advanced features.
#' Requires a local installation of Chrome.
#'
#' @param input Path to Rmd or html file of xaringan slides.
#' @param output_file The name of the output file. If using NULL then
#'   the output filename will be based on filename for the input file.
#'   If a filename is provided, a path to the output file can also be provided.
#' @param delay Seconds of delay between advancing to and printing
#'   a new slide.
#' @param include_partial_slides Should partial (continuation) slides be
#'   included in the output? If `FALSE`, the default, only the complete slide
#'   is included in the PDF.
xaringan_to_pdf <- function(
input,
output_file = NULL,
delay = 1,
include_partial_slides = FALSE
) {
if (!requireNamespace("chromote", quietly = TRUE)) {
stop("`chromote` is required: devtools::install_github('rstudio/chromote')")
}
required_packages <- c("progress", "jsonlite", "pdftools", "digest", "fs")
for (pkg in required_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop("`", pkg, "` is required: install.packages('", pkg, "')")
}
}
is_url <- grepl("^(ht|f)tp", tolower(input))
if (is.null(output_file)) {
if (is_url) {
output_file <- fs::path_ext_set(fs::path_file(input), "pdf")
} else {
output_file <- fs::path_ext_set(input, "pdf")
}
}
if (!is_url && !grepl("^file://", input)) {
if (!tolower(fs::path_ext(input)) %in% c("htm", "html")) {
stop("`input` must be the HTML version of the slides.")
}
input <- paste0("file://", fs::path_abs(input))
}
b <- chromote::ChromoteSession$new()
on.exit(b$close(), add = TRUE)
b$Page$navigate(input, wait_ = TRUE)
b$Page$loadEventFired()
has_remark <- b$Runtime$evaluate("typeof slideshow !== 'undefined'")$result$value
if (!has_remark) {
stop("Input does not appear to be xaringan slides: ", input)
}
current_slide <- function() {
x <- b$Runtime$evaluate("slideshow.getCurrentSlideIndex()")$result$value
as.integer(x) + 1L
}
slide_is_continuation <- function() {
b$Runtime$evaluate(
"document.querySelector('.remark-visible').matches('.has-continuation')"
)$result$value
}
hash_current_slide <- function() {
digest::digest(b$Runtime$evaluate(
"document.querySelector('.remark-visible').innerHTML"
)$result$value)
}
get_ratio <- function() {
r <- b$Runtime$evaluate('slideshow.getRatio()')$result$value
r <- lapply(strsplit(r, ":"), as.integer)
width <- r[[1]][1]
height <- r[[1]][2]
page_width <- 8/width * width
list(
width = as.integer(908 * width / height),
height = 681L,
page = list(width = page_width, height = page_width * height / width)
)
}
slide_size <- get_ratio()
expected_slides <- as.integer(
b$Runtime$evaluate("slideshow.getSlideCount()")$result$value
)
max_slides <- expected_slides * 4
b$Browser$setWindowBounds(1, bounds = list(
width = slide_size$width,
height = slide_size$height
))
b$Emulation$setEmulatedMedia("print")
b$Runtime$evaluate(paste0(
"let style = document.createElement('style')\n",
"style.innerText = '@media print { ",
".remark-slide-container:not(.remark-visible){ display:none; }",
if (include_partial_slides) " .has-continuation { display: block }",
"}'\n",
"document.head.appendChild(style)"
))
pb <- progress::progress_bar$new(
format = "Slide :slide (:part) [:bar] Eta: :eta",
total = expected_slides
)
idx_slide <- current_slide()
last_hash <- ""
idx_part <- 0L
pdf_files <- c()
for (i in seq_len(max_slides)) {
if (i > 1) {
b$Input$dispatchKeyEvent(
"rawKeyDown",
windowsVirtualKeyCode = 39,
code = "ArrowRight",
key = "ArrowRight",
wait_ = TRUE
)
}
if (current_slide() == idx_slide) {
step <- 0L
idx_part <- idx_part + 1L
} else {
step <- 1L
idx_part <- 1L
}
idx_slide <- current_slide()
pb$tick(step, tokens = list(slide = idx_slide, part = idx_part))
if (!isTRUE(include_partial_slides) && slide_is_continuation()) next
Sys.sleep(delay)
this_hash <- hash_current_slide()
if (identical(last_hash, this_hash)) break
last_hash <- this_hash
pdf_file_promise <- b$Page$printToPDF(
landscape = TRUE,
printBackground = TRUE,
paperWidth = 12,
paperHeight = 9,
marginTop = 0,
marginRight = 0,
marginBottom = 0,
marginLeft = 0,
pageRanges = "1",
preferCSSPageSize = TRUE,
wait_ = FALSE
)$then(function(value) {
filename <- tempfile(fileext = ".pdf")
writeBin(jsonlite::base64_dec(value$data), filename)
filename
})
pdf_files <- c(pdf_files, b$wait_for(pdf_file_promise))
}
pdftools::pdf_combine(pdf_files, output = output_file)
fs::file_delete(pdf_files)
invisible(output_file)
}
xarringan_to_pdf("https://sandragodinhosilva.github.io/microbiomes2021/pages/1_Intro.html")
xarringan_to_pdf("https://sandragodinhosilva.github.io/microbiomes2021/pages/1_Intro.html")
xaringan_to_pdf("https://sandragodinhosilva.github.io/microbiomes2021/pages/1_Intro.html")
