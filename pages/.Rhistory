```{r sim, echo=FALSE, out.width="70%", fig.align="end"}
knitr::include_graphics("img/scorelink.png")
```
]
xaringan:::inf_mr()
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
library(knitr)
library(broom)
library(icons)
library(scales)
library(openintro)
library(jsonlite)
library(tidyverse)
library(xaringanExtra)
library(nhsrtheme)
library(NHSRdatasets)
# set default options
opts_chunk$set(echo=FALSE,
collapse = TRUE,
fig.width = 7.252,
fig.height = 4,
dpi = 300)
# set engines
knitr::knit_engines$set("markdown")
xaringanExtra::use_tile_view()
xaringanExtra::use_panelset()
xaringanExtra::use_clipboard()
xaringanExtra::use_webcam()
xaringanExtra::use_broadcast()
xaringanExtra::use_share_again()
xaringanExtra::style_share_again(
share_buttons = c("twitter", "linkedin", "pocket")
)
# Get data:
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate2.gif")
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
anim_save("gif/tx-sales-gganimate.gif")
q
q
q
q()
library(gapminder)
library(ggplot2)
library(gganimate)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
anim_save(filename="gganimate.gif", animation = last_animation(), path="gif")
xaringan:::inf_mr()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
xaringan:::inf_mr()
getwd()
install.packages('dplyr', repos = 'https://cloud.r-project.org')
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data")
# Check if in correct directory:
getwd()
install.packages("dplyr", repos = "https://cloud.r-project.org")
install.packages('dplyr', repos = 'https://cloud.r-project.org')
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data")
# Check if in correct directory:
getwd()
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the names of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
length(list.datac)
# SUBSTITUE  X with the number of files in analysis
for (i in 3:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
#changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
##########################################
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
#NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
#########################
#Descrition
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
######################
#bind everything
COG_final <- cbind(finalC, finalDC, COG_only)
#correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
#put Accession in first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
#tab separated file
write.table(COG_final, "cog_table.txt", sep="\t", row.names = FALSE, quote=FALSE)
# SUBSTITUE  X with the number of files in analysis
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
#changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
##########################################
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
#NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
#########################
#Descrition
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
######################
#bind everything
COG_final <- cbind(finalC, finalDC, COG_only)
#correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
#put Accession in first column
COG_final <- COG_final %>%
select(Accession, everything())
#tab separated file
write.table(COG_final, "cog_table.txt", sep="\t", row.names = FALSE, quote=FALSE)
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the names of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
################################################################################
# ATTENTION
# SUBSTITUE  X with the number of files in analysis
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
################################################################################
#changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
##########################################
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
#NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
#########################
#Descrition
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
######################
#bind everything
COG_final <- cbind(finalC, finalDC, COG_only)
#correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
#put Accession in first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
#tab separated file
write.table(COG_final, "cog_table.txt", sep="\t", row.names = FALSE, quote=FALSE)
################################################################################
### Script for merging annotation tables from WebMGA
# This script can:
# open cog files
# merge results into a single table
# Steps where code modification is necessary are highlighted with "ATTENTION"
# The remaining comments are just here to help you understand the code
################################################################################
# Install necessary package:
# If the package dplyr is already installed, comment next line (add #):
install.packages('dplyr', repos = 'https://cloud.r-project.org')
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
# Changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
# Add Description
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates Tab separated file
write.table(COG_final, "cog_table.txt", sep="\t", row.names = FALSE, quote=FALSE)
install.packages("dplyr", repos = "https://cloud.r-project.org")
write.table(COG_final, "cog_table.csv", sep=",", row.names = FALSE, quote=FALSE)
################################################################################
### Script to merge annotation tables from WebMGA
# This script can:
# open cog files
# merge results into a single table
# Steps where code modification is necessary are highlighted with "ATTENTION"
# The remaining comments are just here to help you understand the code
# Author: Sandra Godinho Silva (sandragodinhosilva@tecnico.ulisboa.pt)
# Last version: 15-04-2021
################################################################################
# Install necessary package:
# If the package dplyr is already installed, comment next line (add #):
install.packages('dplyr', repos = 'https://cloud.r-project.org')
# Load package:
library("dplyr")
################################################################################
# ATTENTION
# Define directory where WebMGA files are (substitute with your path):
setwd("C:/Users/Sandra/OneDrive - Universidade de Lisboa/PhD_Related/6_Microbiomes_teaching/microbiomes2021/pages/data")
# Check if in correct directory:
getwd()
################################################################################
# List .txt files in the directory (The annotation files)
list.filenamesc <- list.files(pattern=".txt$")
str(list.filenamesc)
# Removes possible output already in this directory:
list.filenamesc[!grepl("cog_file.txt", list.filenamesc)]
# Creates an empty list that will serve as a container to receive the incoming files
list.datac <-list()
# Creates a loop to read the individual files data
for (i in 1:length(list.filenamesc))
{aux_listc<-read.table(list.filenamesc[i],
sep="\t", header=TRUE, quote="", fill=FALSE)
aux_listc<-aux_listc[,-c(4,5)]
colnames(aux_listc)[3]<-list.filenamesc[i]
list.datac[[i]]<-aux_listc
}
# Adds the filenames of your data to the list
names(list.datac) <- list.filenamesc
str(list.datac)
final_mergec<-list.datac[[1]]
for (i in 2:length(list.datac)){
final_mergec <- full_join(final_mergec, list.datac[[i]], by="Accession")
print(i)}
# Changes NA to zero
final_mergec[is.na(final_mergec)] <- 0
str(final_mergec)
NAME <- grep("Name", names(final_mergec))
DES <- grep("Description", names(final_mergec))
NAMEc <- final_mergec[, NAME]
Descriptionc <- final_mergec[, DES]
COG_only <- final_mergec[,-NAME]
DES2 <- grep("Description", names(COG_only))
COG_only <- COG_only[, -DES2]
# Add NAME
finalC <- character()
row_iC <- 1
for (row_iC in 1:nrow(NAMEc)) {
for(col_iC in 1:ncol(NAMEc)){
if (!is.na(NAMEc[row_iC,col_iC])){
finalC[row_iC] <- as.character(NAMEc[row_iC,col_iC])
break
}
}
}
str(finalC)
# Add Description
finalDC <- character()
row_iDC <- 1
for (row_iDC in 1:nrow(Descriptionc)) {
for(col_iDC in 1:ncol(Descriptionc)){
if (!is.na(Descriptionc[row_iDC,col_iDC])){
finalDC[row_iDC] <- as.character(Descriptionc[row_iDC,col_iDC])
break
}
}
}
str(finalDC)
##############################################################################
# Join everything
COG_final <- cbind(finalC, finalDC, COG_only)
# Correct column names
colnames(COG_final)[colnames(COG_final)=="finalC"] <- "Name"
colnames(COG_final)[colnames(COG_final)=="finalDC"] <- "Description"
colnames(COG_final) <- sub(".txt", "", colnames(COG_final))
# Move COG identifiers to first column
COG_final <- COG_final %>%
select(Accession, everything())
##############################################################################
# Creates Tab separated file
write.table(COG_final, "cog_table.csv", sep=",", row.names = FALSE, quote=FALSE)
write.csv(COG_final, "cog_table.csv", row.names = FALSE, quote=FALSE)
write.table(COG_final, "cog_table.tsv", sep="\t", row.names = FALSE, quote=FALSE)
##############################################################################
# Creates Tab separated file
write.table(COG_final, "cog_table.csv", sep=",", row.names = FALSE, quote=TRUE)
